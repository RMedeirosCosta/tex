	Após feito o \textit{download} do arquivo contendo as interações entre as proteínas do organismo \textit{Macaca Mulatta}, necessitou-se alterar a extensão do arquivo de txt para csv, com intuito do importador nativo do Neo4j ler e conseguir persistir os dados no banco de dados recém criado.
        O banco de dados Neo4j possui algumas peculiaridades. Cada nó pode ter um ou mais rótulos, que tem por objetivo classificar o nó. Nesta perspectiva, as relações (arestas, na Teoria dos Grafos) possuem os tipos. Tanto os nós, quanto as relações podem ter zero ou várias propriedades, estas que por sua vez tem um nome e um valor. O modelo do banco de dados criado para esse trabalho é simples. Os nós tem um rótulo \emph{Protein} e as relações são do tipo \emph{INTERACTS_WITH}. Todos os nós tem apenas uma propriedade \emph{name}, cujo consta o nome da proteína que pode ser da coluna \emph{protein1} ou \emph{protein2} do arquivo. As demais colunas do arquivo serão propriedades de cada relação. Para esse banco de dados foi adotado a seguinte convenção: rótulos com a letra inicial em maiúscula e as demais minúsculas, sem espaços entre palavras, prática conhecida como \textit{CamelCase}\footnote{Veja mais em: https://pt.wikipedia.org/wiki/CamelCase}; nome dos tipos das relações com letras em maiúsculas separadas e caso seja necessário um \textit{underline} para separar palavras; e as propriedades todas em minúsculas sem espaços.
	Antes de realizar a importação, foi criado um índice para o rótulo \emph{Protein} na propriedade \emph{name}, abordagem recomendada pela documentação oficial do banco de dados caso haja grande quantidade de dados. Após isso, foi feito a importação. Isso foi realizado em dois passos, primeiro foram importados os nós e em seguida foram importados as relações. Na figura 2 é demonstrado as senteças \emph{Cypher}.
	FIGURA 2
	A primeira sentença é a criação do índice. A cláusula \emph{using periodic commit 5000} quer dizer que é necessário realizar o commit a cada 5000 objetos carregados na memória, assim como a criação do índice, isso é um prática recomendada pela documentação oficial do Neo4j. Logo em seguida, nota-se \emph{load csv with headers from} que em uma tradução literal significa: "carregar csv com cabecalhos vindo do arquivo". Ao lado consta a localização do arquivo. A cláusula \emph{as} aponta um "apelido" para a linha atual do arquivo, que no caso é a letra \emph{l}. A cláusula \emph{fieldterminator} especifica o separador do arquivo csv, o que no caso é um espaço. A palavra reservada merge age da seguinte forma, caso não tenha uma relação ou nó que atende as condições destacadas na sentença, então esse objeto é criado. Para simplificar, é procurado o nós do tipo \emph{Protein} com a propriedade \emph{name} com valor da célula corrente da coluna \emph{protein1}. Caso encontre, nada é realizado. Se esse nó não for encontrado, então ele é criado com essas características.
	A cláusula \emph{match} da terceira senteça tenta combinar o objeto de acordo com as características informadas na sentença. Nesse caso, dois nós, p1 e p2, que possuem rótulo \emph{Protein} com \emph{name} de acordo com a célula da coluna \emph{protein1} e \emph{protein2}, respectivamente. O formato ()-[]-() server para especificar a relação de um nó, com outro nós. Os parênteses representam os nós e os colchetes a relação. A letra \empth{r} é utilizada com um "apelido" assim com a letra \emph{l} foi usada anteriormente. \empth{on create set} nessa sentença, age de forma similar que ao \emph{merge}, mas ao contrário do \emph{merge} estas cláusulas são para proriedades. O resto da sentença especifica que é criado uma propriedade na relação para cada coluna remanescente na linha, com o valor de cada célula convertida para elementos do conjunto dos reais. Após execução da última sentença, é possível vizualizar os dados físicos do banco de dados, como: tamanho total do banco, quantidade de nós, propriedades, relaçoes e tipos de relações inseridas e outras informações. Essas informações podem ser vistas na Figura 3.
	FIGURA 3.